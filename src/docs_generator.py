"""
Documentation generation using Google Gemini AI
"""

import os
import google.generativeai as genai
from datetime import datetime
from typing import Optional


def configure_gemini():
    """Configure Gemini API with API key from environment"""
    api_key = os.getenv("GEMINI_API_KEY")
    if not api_key:
        raise ValueError("GEMINI_API_KEY environment variable not set")

    genai.configure(api_key=api_key)
    return genai.GenerativeModel("gemini-1.5-flash")


def get_file_type_context(file_path: str) -> str:
    """Get context about the file type for better documentation"""
    extension = file_path.split(".")[-1].lower() if "." in file_path else ""

    contexts = {
        "py": "Python source code",
        "js": "JavaScript source code",
        "ts": "TypeScript source code",
        "jsx": "React JSX component",
        "tsx": "React TypeScript component",
        "java": "Java source code",
        "cpp": "C++ source code",
        "c": "C source code",
        "go": "Go source code",
        "rs": "Rust source code",
        "php": "PHP source code",
        "rb": "Ruby source code",
        "swift": "Swift source code",
        "kt": "Kotlin source code",
        "scala": "Scala source code",
        "html": "HTML markup",
        "css": "CSS stylesheet",
        "scss": "SCSS stylesheet",
        "less": "LESS stylesheet",
        "md": "Markdown documentation",
        "json": "JSON configuration/data",
        "yaml": "YAML configuration",
        "yml": "YAML configuration",
        "xml": "XML markup",
        "sql": "SQL database script",
        "sh": "Shell script",
        "bash": "Bash script",
        "dockerfile": "Docker configuration",
        "makefile": "Make build script",
    }

    return contexts.get(extension, "source code file")


def generate_fallback_docs(file_content: str, file_path: str) -> str:
    """Generate basic documentation when AI fails"""
    lines = len(file_content.split("\n"))
    chars = len(file_content)
    file_type = get_file_type_context(file_path)

    # Extract some basic info
    imports = []
    functions = []
    classes = []

    for line in file_content.split("\n"):
        line = line.strip()
        if line.startswith("import ") or line.startswith("from "):
            imports.append(line)
        elif line.startswith("def "):
            func_name = line.split("(")[0].replace("def ", "")
            functions.append(func_name)
        elif line.startswith("class "):
            class_name = line.split("(")[0].split(":")[0].replace("class ", "")
            classes.append(class_name)

    doc = f"""# Documentation for {file_path}

**Generated on:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

## Overview
This {file_type} contains {lines} lines of code ({chars} characters).

## File Statistics
- **Lines of code:** {lines}
- **File size:** {chars} characters
- **File type:** {file_type}
"""

    if imports:
        doc += f"\n## Dependencies\n"
        for imp in imports[:10]:  # Limit to first 10
            doc += f"- `{imp}`\n"

    if classes:
        doc += f"\n## Classes\n"
        for cls in classes:
            doc += f"- `{cls}`\n"

    if functions:
        doc += f"\n## Functions\n"
        for func in functions[:15]:  # Limit to first 15
            doc += f"- `{func}()`\n"

    doc += f"\n---\n*This documentation was auto-generated by IntelliDocs (fallback mode)*\n"

    return doc


class DocsGenerator:
    def summarise_file(self, filename: str, content: str) -> str:
        """
        Generate comprehensive documentation for a file using Google Gemini AI

        Args:
            filename: The name/path of the file
            content: The content of the file

        Returns:
            Generated documentation as markdown
        """
        try:
            model = configure_gemini()
            file_type = get_file_type_context(filename)

            prompt = f"""Analyze this {file_type} and create comprehensive technical documentation in markdown format.

File: {filename}

Code:
```
{content}
```

Please provide:

1. **Overview** - Brief description of what this file does
2. **Key Components** - Main functions, classes, or modules
3. **Dependencies** - External libraries or imports used
4. **API/Interface** - Public methods, functions, or exported items
5. **Usage Examples** - How to use key functionality (if applicable)
6. **Implementation Details** - Important algorithms or design patterns
7. **Configuration** - Any configuration options or environment variables
8. **Error Handling** - How errors are managed
9. **Performance Notes** - Any performance considerations
10. **Related Files** - Files this might interact with (based on imports/references)

Format the response as clean, professional markdown documentation. Be thorough but concise. Focus on what developers need to know to understand and work with this code.

If the file is configuration (JSON, YAML, etc.), focus on explaining the configuration options and their purposes.
If the file is a script, explain what it does and how to run it.
If the file is a library/module, explain the public API and how to use it.

Start with a header like "# Documentation for {filename}" and include a timestamp.
"""

            response = model.generate_content(prompt)

            if response.text:
                # Add timestamp to AI-generated docs
                timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
                ai_docs = response.text
                if not ai_docs.startswith("#"):
                    ai_docs = f"# Documentation for {filename}\n\n**Generated on:** {timestamp}\n\n{ai_docs}"
                else:
                    ai_docs = ai_docs.replace(
                        f"# Documentation for {filename}",
                        f"# Documentation for {filename}\n\n**Generated on:** {timestamp}",
                    )

                ai_docs += f"\n\n---\n*This documentation was auto-generated by IntelliDocs using Google Gemini AI*\n"
                return ai_docs
            else:
                return generate_fallback_docs(content, filename)

        except Exception as e:
            print(f"‚ùå Error generating AI documentation for {filename}: {e}")
            return generate_fallback_docs(content, filename)
